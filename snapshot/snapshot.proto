// To regenerate protobuf golang code:
// protoc --go_out=. --go_opt=paths=source_relative snapshot/snapshot.proto
syntax = "proto3";

package snapshot;
option go_package = "./snapshot";

// --------------------------------------------- SYNCHRONIZATION

// The top-level message for all websocket communication.
message WebsocketMessage {
  oneof payload {
    // SERVER -> CLIENT: The primary message. Contains all the changes for a
    // single file.
    FileDelta file_delta = 1;

    // CLIENT -> SERVER: A mechanism for a client to signal it's out of sync and
    // needs a full project resync.
    FullResyncRequest resync_request = 2;

    StartProjectSync start_sync = 3;
    EndProjectSync end_sync = 4;
  }
}

// A self-contained package describing all the changes for a single file
// needed to bring it from State N-1 to the newest State N.
message FileDelta {
  // The relative path of the file that was modified.
  string path = 1;

  // The final BLAKE3 hash of the entire file after the delta is applied.
  // The client MUST use this to verify the patch was successful.
  bytes checksum = 2;

  // A list of chunks that are NEW to the file. Their content is included.
  repeated AddedChunk added_chunks = 3;

  // A list of hashes for chunks that were REMOVED from the file.
  repeated bytes removed_chunk_hashes = 4;

  // A list of chunks that were already in the file but MOVED to a new position.
  repeated MovedChunk moved_chunks = 5;
}

// Carries the content and metadata for a new chunk.
message AddedChunk {
  bytes hash = 1;
  bytes content = 2;
  int64 new_offset = 3;
}

// Describes the new position for an existing chunk.
message MovedChunk {
  bytes hash = 1;
  int64 new_offset = 2;
}

// An empty message from a client to the host.
// Its presence signals that the client has encountered an error
// and needs the host to initiate the full, initial project sync protocol again.
message FullResyncRequest {}

message StartProjectSync {}

message EndProjectSync {}

// --------------------------------------------- SNAPSHOT

// A full project snapshot message
message ProjectSnapshot {
  // The project represented as a map of files it consists of
  map<string, File> files = 1; // path -> file
}

// A plain file used for storing rather than synchronizing
message File {
  // The file's checksum (a BLAKE3 generated hash of it's content)
  bytes checksum = 1;
  // A list of chunks representing this file's content
  repeated Chunk chunks = 2;
}

// A plain chunk used for storing rather than synchronizing
message Chunk {
  // The chunk's checksum (a BLAKE3 generated hash of it's content)
  bytes checksum = 1;
  // The offset of the chunk from the beginning of the file
  int64 offset = 2;
  // Teh size of the chunk in bytes
  int64 size = 3;
}
