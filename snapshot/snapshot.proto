// To regenerate protobuf golang code:
// protoc --go_out=. --go_opt=paths=source_relative snapshot/snapshot.proto
syntax = "proto3";

package snapshot;
option go_package = "./snapshot";

// --------------------------------------------- SYNCHRONIZATION

// The top-level message for all websocket communication.
message WebsocketMessage {
  oneof payload {
    // SERVER -> CLIENT: The primary message. Contains all the changes for a
    // single file.
    FileDelta file_delta = 1;

    // SERVER -> CLIENT: Sends a file for initial project sync to the client
    InitialSyncFileWithPath initial_file = 3;

    StartProjectSync start_sync = 4;
    EndProjectSync end_sync = 5;
  }
}

// A self-contained package describing all the changes for a single file
// needed to bring it from State N-1 to the newest State N.
message FileDelta {
  // The relative path of the file that was modified.
  string path = 1;

  // The final BLAKE3 hash of the entire file after the delta is applied.
  // The client MUST use this to verify the patch was successful.
  bytes checksum = 2;

  // A list of chunks that are NEW to the file. Their content is included.
  repeated AddedChunk added_chunks = 3;

  // A list of hashes for chunks that were REMOVED from the file.
  repeated bytes removed_chunk_hashes = 4;

  // A list of chunks that were already in the file but MOVED to a new position.
  repeated MovedChunk moved_chunks = 5;
}

// Carries the content and metadata for a new chunk.
message AddedChunk {
  bytes checksum = 1;
  bytes content = 2;
  int64 new_offset = 3;
  int64 version = 4;
}

// Describes the new position for an existing chunk.
message MovedChunk {
  bytes checksum = 1;
  int64 new_offset = 2;
  int64 version = 3;
}

message StartProjectSync {}

message EndProjectSync {}

// --------------------------------------------- Inital sync

message InitialSyncFileWithPath {
  bytes path = 1;
  InitialSyncFile file = 2;
}

// A plain file used for storing rather than synchronizing
message InitialSyncFile {
  // The file's checksum (a BLAKE3 generated hash of it's content)
  bytes checksum = 2;
  // A list of chunks representing this file's content
  repeated InitialSyncChunk chunks = 3;
}

// A plain chunk used for storing rather than synchronizing
message InitialSyncChunk {
  // The chunk's checksum (a BLAKE3 generated hash of it's content)
  bytes checksum = 1;
  // The chunk's actual content
  bytes content = 2;
  // The offset of the chunk from the beginning of the file
  int64 offset = 3;
  // The size of the chunk in bytes
  int64 size = 4;
  // The change version of the chunk. Used for contructing snapshots mid-session
  int64 version = 5;
}

message ProjectSnapshot {
  map<string, InitialSyncFile> files = 1; // path -> file
}
