// To regenerate protobuf golang code:
// protoc --go_out=. --go_opt=paths=source_relative snapshot/snapshot.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: snapshot/snapshot.proto

package snapshot

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The top-level message for all websocket communication.
type WebsocketMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*WebsocketMessage_FileDelta
	//	*WebsocketMessage_ResyncRequest
	//	*WebsocketMessage_StartSync
	//	*WebsocketMessage_EndSync
	Payload       isWebsocketMessage_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WebsocketMessage) Reset() {
	*x = WebsocketMessage{}
	mi := &file_snapshot_snapshot_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebsocketMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebsocketMessage) ProtoMessage() {}

func (x *WebsocketMessage) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_snapshot_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebsocketMessage.ProtoReflect.Descriptor instead.
func (*WebsocketMessage) Descriptor() ([]byte, []int) {
	return file_snapshot_snapshot_proto_rawDescGZIP(), []int{0}
}

func (x *WebsocketMessage) GetPayload() isWebsocketMessage_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *WebsocketMessage) GetFileDelta() *FileDelta {
	if x != nil {
		if x, ok := x.Payload.(*WebsocketMessage_FileDelta); ok {
			return x.FileDelta
		}
	}
	return nil
}

func (x *WebsocketMessage) GetResyncRequest() *FullResyncRequest {
	if x != nil {
		if x, ok := x.Payload.(*WebsocketMessage_ResyncRequest); ok {
			return x.ResyncRequest
		}
	}
	return nil
}

func (x *WebsocketMessage) GetStartSync() *StartProjectSync {
	if x != nil {
		if x, ok := x.Payload.(*WebsocketMessage_StartSync); ok {
			return x.StartSync
		}
	}
	return nil
}

func (x *WebsocketMessage) GetEndSync() *EndProjectSync {
	if x != nil {
		if x, ok := x.Payload.(*WebsocketMessage_EndSync); ok {
			return x.EndSync
		}
	}
	return nil
}

type isWebsocketMessage_Payload interface {
	isWebsocketMessage_Payload()
}

type WebsocketMessage_FileDelta struct {
	// SERVER -> CLIENT: The primary message. Contains all the changes for a
	// single file.
	FileDelta *FileDelta `protobuf:"bytes,1,opt,name=file_delta,json=fileDelta,proto3,oneof"`
}

type WebsocketMessage_ResyncRequest struct {
	// CLIENT -> SERVER: A mechanism for a client to signal it's out of sync and
	// needs a full project resync.
	ResyncRequest *FullResyncRequest `protobuf:"bytes,2,opt,name=resync_request,json=resyncRequest,proto3,oneof"`
}

type WebsocketMessage_StartSync struct {
	StartSync *StartProjectSync `protobuf:"bytes,3,opt,name=start_sync,json=startSync,proto3,oneof"`
}

type WebsocketMessage_EndSync struct {
	EndSync *EndProjectSync `protobuf:"bytes,4,opt,name=end_sync,json=endSync,proto3,oneof"`
}

func (*WebsocketMessage_FileDelta) isWebsocketMessage_Payload() {}

func (*WebsocketMessage_ResyncRequest) isWebsocketMessage_Payload() {}

func (*WebsocketMessage_StartSync) isWebsocketMessage_Payload() {}

func (*WebsocketMessage_EndSync) isWebsocketMessage_Payload() {}

// A self-contained package describing all the changes for a single file
// needed to bring it from State N-1 to the newest State N.
type FileDelta struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The relative path of the file that was modified.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// The final BLAKE3 hash of the entire file after the delta is applied.
	// The client MUST use this to verify the patch was successful.
	Checksum []byte `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// A list of chunks that are NEW to the file. Their content is included.
	AddedChunks []*AddedChunk `protobuf:"bytes,3,rep,name=added_chunks,json=addedChunks,proto3" json:"added_chunks,omitempty"`
	// A list of hashes for chunks that were REMOVED from the file.
	RemovedChunkHashes [][]byte `protobuf:"bytes,4,rep,name=removed_chunk_hashes,json=removedChunkHashes,proto3" json:"removed_chunk_hashes,omitempty"`
	// A list of chunks that were already in the file but MOVED to a new position.
	MovedChunks   []*MovedChunk `protobuf:"bytes,5,rep,name=moved_chunks,json=movedChunks,proto3" json:"moved_chunks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileDelta) Reset() {
	*x = FileDelta{}
	mi := &file_snapshot_snapshot_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDelta) ProtoMessage() {}

func (x *FileDelta) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_snapshot_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDelta.ProtoReflect.Descriptor instead.
func (*FileDelta) Descriptor() ([]byte, []int) {
	return file_snapshot_snapshot_proto_rawDescGZIP(), []int{1}
}

func (x *FileDelta) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileDelta) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

func (x *FileDelta) GetAddedChunks() []*AddedChunk {
	if x != nil {
		return x.AddedChunks
	}
	return nil
}

func (x *FileDelta) GetRemovedChunkHashes() [][]byte {
	if x != nil {
		return x.RemovedChunkHashes
	}
	return nil
}

func (x *FileDelta) GetMovedChunks() []*MovedChunk {
	if x != nil {
		return x.MovedChunks
	}
	return nil
}

// Carries the content and metadata for a new chunk.
type AddedChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          []byte                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Content       []byte                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	NewOffset     int64                  `protobuf:"varint,3,opt,name=new_offset,json=newOffset,proto3" json:"new_offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddedChunk) Reset() {
	*x = AddedChunk{}
	mi := &file_snapshot_snapshot_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddedChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddedChunk) ProtoMessage() {}

func (x *AddedChunk) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_snapshot_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddedChunk.ProtoReflect.Descriptor instead.
func (*AddedChunk) Descriptor() ([]byte, []int) {
	return file_snapshot_snapshot_proto_rawDescGZIP(), []int{2}
}

func (x *AddedChunk) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *AddedChunk) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *AddedChunk) GetNewOffset() int64 {
	if x != nil {
		return x.NewOffset
	}
	return 0
}

// Describes the new position for an existing chunk.
type MovedChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          []byte                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	NewOffset     int64                  `protobuf:"varint,2,opt,name=new_offset,json=newOffset,proto3" json:"new_offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MovedChunk) Reset() {
	*x = MovedChunk{}
	mi := &file_snapshot_snapshot_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MovedChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovedChunk) ProtoMessage() {}

func (x *MovedChunk) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_snapshot_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovedChunk.ProtoReflect.Descriptor instead.
func (*MovedChunk) Descriptor() ([]byte, []int) {
	return file_snapshot_snapshot_proto_rawDescGZIP(), []int{3}
}

func (x *MovedChunk) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *MovedChunk) GetNewOffset() int64 {
	if x != nil {
		return x.NewOffset
	}
	return 0
}

// An empty message from a client to the host.
// Its presence signals that the client has encountered an error
// and needs the host to initiate the full, initial project sync protocol again.
type FullResyncRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FullResyncRequest) Reset() {
	*x = FullResyncRequest{}
	mi := &file_snapshot_snapshot_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullResyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullResyncRequest) ProtoMessage() {}

func (x *FullResyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_snapshot_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullResyncRequest.ProtoReflect.Descriptor instead.
func (*FullResyncRequest) Descriptor() ([]byte, []int) {
	return file_snapshot_snapshot_proto_rawDescGZIP(), []int{4}
}

type StartProjectSync struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartProjectSync) Reset() {
	*x = StartProjectSync{}
	mi := &file_snapshot_snapshot_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartProjectSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartProjectSync) ProtoMessage() {}

func (x *StartProjectSync) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_snapshot_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartProjectSync.ProtoReflect.Descriptor instead.
func (*StartProjectSync) Descriptor() ([]byte, []int) {
	return file_snapshot_snapshot_proto_rawDescGZIP(), []int{5}
}

type EndProjectSync struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndProjectSync) Reset() {
	*x = EndProjectSync{}
	mi := &file_snapshot_snapshot_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndProjectSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndProjectSync) ProtoMessage() {}

func (x *EndProjectSync) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_snapshot_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndProjectSync.ProtoReflect.Descriptor instead.
func (*EndProjectSync) Descriptor() ([]byte, []int) {
	return file_snapshot_snapshot_proto_rawDescGZIP(), []int{6}
}

// A full project snapshot message
type ProjectSnapshot struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The project represented as a map of files it consists of
	Files         map[string]*File `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // path -> file
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProjectSnapshot) Reset() {
	*x = ProjectSnapshot{}
	mi := &file_snapshot_snapshot_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectSnapshot) ProtoMessage() {}

func (x *ProjectSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_snapshot_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectSnapshot.ProtoReflect.Descriptor instead.
func (*ProjectSnapshot) Descriptor() ([]byte, []int) {
	return file_snapshot_snapshot_proto_rawDescGZIP(), []int{7}
}

func (x *ProjectSnapshot) GetFiles() map[string]*File {
	if x != nil {
		return x.Files
	}
	return nil
}

// A plain file used for storing rather than synchronizing
type File struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The file's checksum (a BLAKE3 generated hash of it's content)
	Checksum []byte `protobuf:"bytes,1,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// A list of chunks representing this file's content
	Chunks        []*Chunk `protobuf:"bytes,2,rep,name=chunks,proto3" json:"chunks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *File) Reset() {
	*x = File{}
	mi := &file_snapshot_snapshot_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_snapshot_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_snapshot_snapshot_proto_rawDescGZIP(), []int{8}
}

func (x *File) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

func (x *File) GetChunks() []*Chunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

// A plain chunk used for storing rather than synchronizing
type Chunk struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The chunk's checksum (a BLAKE3 generated hash of it's content)
	Checksum []byte `protobuf:"bytes,1,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// The offset of the chunk from the beginning of the file
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// Teh size of the chunk in bytes
	Size          int64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	mi := &file_snapshot_snapshot_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_snapshot_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_snapshot_snapshot_proto_rawDescGZIP(), []int{9}
}

func (x *Chunk) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

func (x *Chunk) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Chunk) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

var File_snapshot_snapshot_proto protoreflect.FileDescriptor

const file_snapshot_snapshot_proto_rawDesc = "" +
	"\n" +
	"\x17snapshot/snapshot.proto\x12\bsnapshot\"\x8d\x02\n" +
	"\x10WebsocketMessage\x124\n" +
	"\n" +
	"file_delta\x18\x01 \x01(\v2\x13.snapshot.FileDeltaH\x00R\tfileDelta\x12D\n" +
	"\x0eresync_request\x18\x02 \x01(\v2\x1b.snapshot.FullResyncRequestH\x00R\rresyncRequest\x12;\n" +
	"\n" +
	"start_sync\x18\x03 \x01(\v2\x1a.snapshot.StartProjectSyncH\x00R\tstartSync\x125\n" +
	"\bend_sync\x18\x04 \x01(\v2\x18.snapshot.EndProjectSyncH\x00R\aendSyncB\t\n" +
	"\apayload\"\xdf\x01\n" +
	"\tFileDelta\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x1a\n" +
	"\bchecksum\x18\x02 \x01(\fR\bchecksum\x127\n" +
	"\fadded_chunks\x18\x03 \x03(\v2\x14.snapshot.AddedChunkR\vaddedChunks\x120\n" +
	"\x14removed_chunk_hashes\x18\x04 \x03(\fR\x12removedChunkHashes\x127\n" +
	"\fmoved_chunks\x18\x05 \x03(\v2\x14.snapshot.MovedChunkR\vmovedChunks\"Y\n" +
	"\n" +
	"AddedChunk\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\fR\x04hash\x12\x18\n" +
	"\acontent\x18\x02 \x01(\fR\acontent\x12\x1d\n" +
	"\n" +
	"new_offset\x18\x03 \x01(\x03R\tnewOffset\"?\n" +
	"\n" +
	"MovedChunk\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\fR\x04hash\x12\x1d\n" +
	"\n" +
	"new_offset\x18\x02 \x01(\x03R\tnewOffset\"\x13\n" +
	"\x11FullResyncRequest\"\x12\n" +
	"\x10StartProjectSync\"\x10\n" +
	"\x0eEndProjectSync\"\x97\x01\n" +
	"\x0fProjectSnapshot\x12:\n" +
	"\x05files\x18\x01 \x03(\v2$.snapshot.ProjectSnapshot.FilesEntryR\x05files\x1aH\n" +
	"\n" +
	"FilesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12$\n" +
	"\x05value\x18\x02 \x01(\v2\x0e.snapshot.FileR\x05value:\x028\x01\"K\n" +
	"\x04File\x12\x1a\n" +
	"\bchecksum\x18\x01 \x01(\fR\bchecksum\x12'\n" +
	"\x06chunks\x18\x02 \x03(\v2\x0f.snapshot.ChunkR\x06chunks\"O\n" +
	"\x05Chunk\x12\x1a\n" +
	"\bchecksum\x18\x01 \x01(\fR\bchecksum\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x03R\x06offset\x12\x12\n" +
	"\x04size\x18\x03 \x01(\x03R\x04sizeB\fZ\n" +
	"./snapshotb\x06proto3"

var (
	file_snapshot_snapshot_proto_rawDescOnce sync.Once
	file_snapshot_snapshot_proto_rawDescData []byte
)

func file_snapshot_snapshot_proto_rawDescGZIP() []byte {
	file_snapshot_snapshot_proto_rawDescOnce.Do(func() {
		file_snapshot_snapshot_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_snapshot_snapshot_proto_rawDesc), len(file_snapshot_snapshot_proto_rawDesc)))
	})
	return file_snapshot_snapshot_proto_rawDescData
}

var file_snapshot_snapshot_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_snapshot_snapshot_proto_goTypes = []any{
	(*WebsocketMessage)(nil),  // 0: snapshot.WebsocketMessage
	(*FileDelta)(nil),         // 1: snapshot.FileDelta
	(*AddedChunk)(nil),        // 2: snapshot.AddedChunk
	(*MovedChunk)(nil),        // 3: snapshot.MovedChunk
	(*FullResyncRequest)(nil), // 4: snapshot.FullResyncRequest
	(*StartProjectSync)(nil),  // 5: snapshot.StartProjectSync
	(*EndProjectSync)(nil),    // 6: snapshot.EndProjectSync
	(*ProjectSnapshot)(nil),   // 7: snapshot.ProjectSnapshot
	(*File)(nil),              // 8: snapshot.File
	(*Chunk)(nil),             // 9: snapshot.Chunk
	nil,                       // 10: snapshot.ProjectSnapshot.FilesEntry
}
var file_snapshot_snapshot_proto_depIdxs = []int32{
	1,  // 0: snapshot.WebsocketMessage.file_delta:type_name -> snapshot.FileDelta
	4,  // 1: snapshot.WebsocketMessage.resync_request:type_name -> snapshot.FullResyncRequest
	5,  // 2: snapshot.WebsocketMessage.start_sync:type_name -> snapshot.StartProjectSync
	6,  // 3: snapshot.WebsocketMessage.end_sync:type_name -> snapshot.EndProjectSync
	2,  // 4: snapshot.FileDelta.added_chunks:type_name -> snapshot.AddedChunk
	3,  // 5: snapshot.FileDelta.moved_chunks:type_name -> snapshot.MovedChunk
	10, // 6: snapshot.ProjectSnapshot.files:type_name -> snapshot.ProjectSnapshot.FilesEntry
	9,  // 7: snapshot.File.chunks:type_name -> snapshot.Chunk
	8,  // 8: snapshot.ProjectSnapshot.FilesEntry.value:type_name -> snapshot.File
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_snapshot_snapshot_proto_init() }
func file_snapshot_snapshot_proto_init() {
	if File_snapshot_snapshot_proto != nil {
		return
	}
	file_snapshot_snapshot_proto_msgTypes[0].OneofWrappers = []any{
		(*WebsocketMessage_FileDelta)(nil),
		(*WebsocketMessage_ResyncRequest)(nil),
		(*WebsocketMessage_StartSync)(nil),
		(*WebsocketMessage_EndSync)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_snapshot_snapshot_proto_rawDesc), len(file_snapshot_snapshot_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_snapshot_snapshot_proto_goTypes,
		DependencyIndexes: file_snapshot_snapshot_proto_depIdxs,
		MessageInfos:      file_snapshot_snapshot_proto_msgTypes,
	}.Build()
	File_snapshot_snapshot_proto = out.File
	file_snapshot_snapshot_proto_goTypes = nil
	file_snapshot_snapshot_proto_depIdxs = nil
}
